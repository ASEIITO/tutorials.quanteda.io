---
title: "R commands"
weight: 5
draft: true
---

You do not need to write a program to perfrom text analysis with **quanteda**, becasue the package has wide range of functions. However, you still have to understand the basic R commands.

## Basic R objects and operations

R has three

### Vectors

As a language for statistical analysis, R's most basic objects are vectors that containe a set values. In the example below, `num_vec` is a *numeric vector* and `char_vec` is a *chracter vector*, and `c()` is used to combine elements of vectors and `<-` is to assign the vector to the variables. 

```{r}
num_vec <- c(1, 5, 6, 3)
print(num_vec)

char_vec <- c('apple', 'banana', 'mandarin', 'melon')
print(char_vec)
```

When you want to extract elements of vectors, use the `[]` operator with index number of the elements.

```{r}
print(num_vec[1])
print(num_vec[1:2])
print(char_vec[c(1, 3)])
```

On numeric vectors, you can apply alrithmatic operartions such as addition, subtraction, multiplication or division. If only a single values is given for multiplication, for example, each elelent of the vector will be multiplied.  

```{r}
num_vec2 <- num_vec * 2
print(num_vec2)
```

You can also evaluate the values of vectors by relational operators such as `==`, `>=`, `>`, `<=`, `<`. The ressult of the operation will be a *logical vector*.

```{r}
logi_gt5_vec <- num_vec >= 5
print(logi_gt5_vec)
```

You cannot apply alrithmatic operations on character vectors, but can apply equality operator.

```{r}
logi_apple_vec <- char_vec == 'apple'
print(logi_apple_vec)
```

You can also concatenate elements of character vectors by `paste()`. Since the two vectors have the same length, elements in the same positions of the vectors are concatenated. 

```{r}
char_vec2 <- paste(c('red', 'yellow', 'orange', 'green'), char_vec)
print(char_vec2)
```

Finally, you can set names to elements of numeric vectors using `names()`.

```{r}
names(num_vec) <- char_vec
print(num_vec)
```

### Data frames

A data frame combines multiple vectors for variables. Vectors for a data frame must have the same lengths but can be different types. `nrow()` and `ncol()` show the number of records and variables in a data frame.

```{r}
friut_df <- data.frame(name = char_vec, count = num_vec )
print(friut_df)
print(nrow(friut_df))
print(ncol(friut_df))
```

You can use `subset()` to select records in the data frame. 

```{r}
friut_df2 <- subset(friut_df, count >= 5)
print(friut_df2)
print(nrow(friut_df2))
print(ncol(friut_df2))
```

{{% notice note %}}
We use `print()` to show values and structures of objects for the sake of clarity in the examples, but you do not need to use the command in the console, becasue R automatically triggers it when objects are returned to the global environment.
{{% /notice %}}

### Matrices

Similar to a data frame, a matrix contains multi-dimensional data but its variables are all in the same type.

```{r}
mat <- matrix(c(1, 3, 6, 8, 3, 5, 2, 7), nrow = 2)
print(mat)
```

You can use `colnames()` or `rownames()` to set/retrieve names to rows or columns of a matrix.

```{r}
colnames(mat) <- char_vec
print(mat)
rownames(mat) <- c('bag1', 'bag2') 
print(mat)
```

You can get the size of a matrix by `dim()` that returns a two-element numeric vector.

```{r}
print(dim(mat))
```

If a matrix has column and row names, you can extract rows or columns by their names.

```{r}
print(mat['bag1',])
print(mat[,'banana'])
```

Finally, you can obtain marginals of matrix by `colSums()` and `rowSums()`.

```{r}
print(rowSums(mat))
print(colSums(mat))
```

{{% notice note %}}
If you want to know the dtails of R commands, prepend `?` to the command and execute. For example, `?subset()` will show you how to use it with different types of objects.
{{% /notice %}}
