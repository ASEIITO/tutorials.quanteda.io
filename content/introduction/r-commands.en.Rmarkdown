---
title: "R commands"
weight: 5
draft: false
---

You do not need to write an R program to perform text analysis with **quanteda**, because the package has wide range of functions. However, you still have to understand the basic R commands.

## Basic R objects and commands

R has three types of objects, *vector*, *data frame* and *matrix*. Since many of the **quanteda** objects behaves similarly to these objects, it is essential for you to understand how to interact with them.

### Vectors

As a language for statistical analysis, R's most basic objects are vectors. Vectors contain a set values, and `num_vec` is a *numeric vector* and `char_vec` is a *chracter vector* in the example below. We use `c()` to combine elements of a vector and `<-` to assign a vector to a variable. 

```{r}
num_vec <- c(1, 5, 6, 3)
print(num_vec)

char_vec <- c('apple', 'banana', 'mandarin', 'melon')
print(char_vec)
```

Once a vector is created, you can extract elements of vectors by the `[]` operator with index numbers of desired elements.

```{r}
print(num_vec[1])
print(num_vec[1:2])
print(char_vec[c(1, 3)])
```

You can apply arithmetical operations such as addition, subtraction, multiplication or division On numeric vectors. If only a single value is given for multiplication, for example, each element of the vector will be multiplied by the same value.  

```{r}
num_vec2 <- num_vec * 2
print(num_vec2)
```

You can also compare elements of a vector by relational operators such as `==`, `>=`, `>`, `<=`, `<`. The result of these operations will be a *logical vector* that contains either `TRUE` or `FALSE`.

```{r}
logi_gt5_vec <- num_vec >= 5
print(logi_gt5_vec)
```

You cannot apply arithmetical operations on character vectors, but can apply equality operator.

```{r}
logi_apple_vec <- char_vec == 'apple'
print(logi_apple_vec)
```

You can also concatenate elements of character vectors by `paste()`. Since the two vectors in the example have the same length, elements at the same positions of the vectors are concatenated. 

```{r}
char_vec2 <- paste(c('red', 'yellow', 'orange', 'green'), char_vec)
print(char_vec2)
```

Finally, you can set names to elements of a numeric vector using `names()`.

```{r}
names(num_vec) <- char_vec
print(num_vec)
```

### Data frames

A data frame combines multiple vectors to construct a dataset. Vectors for a data frame must have the same lengths but can be different types. `nrow()` and `ncol()` show the number of records and variables in a data frame.

```{r}
fruit_df <- data.frame(name = char_vec, count = num_vec )
print(fruit_df)
print(nrow(fruit_df))
print(ncol(fruit_df))
```

You can use `subset()` to select records in the data frame. 

```{r}
fruit_df2 <- subset(fruit_df, count >= 5)
print(fruit_df2)
print(nrow(fruit_df2))
print(ncol(fruit_df2))
```

{{% notice tip %}}
We use `print()` to show values and structures of objects in the examples, but you do not need to use the command in the console, because it is triggered automatically when objects are returned to the global environment.
{{% /notice %}}

### Matrices

Similar to a data frame, a matrix contains multi-dimensional data but its values are all in the same type.

```{r}
mat <- matrix(c(1, 3, 6, 8, 3, 5, 2, 7), nrow = 2)
print(mat)
```

You can use `colnames()` or `rownames()` to set/retrieve names to rows or columns of a matrix.

```{r}
colnames(mat) <- char_vec
print(mat)
rownames(mat) <- c('bag1', 'bag2') 
print(mat)
```

You can obtain the size of a matrix by `dim()` that returns a two-element numeric vector.

```{r}
print(dim(mat))
```

If a matrix has column and row names, you can extract rows or columns by their names.

```{r}
print(mat['bag1',])
print(mat[,'banana'])
```

Finally, you can obtain marginals of matrix by `colSums()` or `rowSums()`.

```{r}
print(rowSums(mat))
print(colSums(mat))
```

{{% notice info %}}
If you want to know the details of R commands, prepend `?` to the command and execute. For example, `?subset()` will show you how to use it with different types of objects.
{{% /notice %}}
